#!/usr/bin/env php
<?php
// PROJECT_ROOT
define('PROJECT_ROOT', realpath(__DIR__));

// composer
require PROJECT_ROOT . '/vendor/autoload.php';

// config
require PROJECT_ROOT . '/config.php';

// uses
use Aws\Ec2\Ec2Client;
use Aws\Ec2\Exception\Ec2Exception;

// init ec2 client
$ec2client = new Ec2Client([
    'region' => $config['Region'],
    'version' => 'latest',
    'debug' => false
    ]);

// logStreams
$logStreams = json_decode(
    file_get_contents(PROJECT_ROOT . '/data/logStreams.json'),
    true
    );

// coollect needed data
//list($instances, $eni2ips, $eni2instance, $ip2cluster) = unserialize(file_get_contents('x.dat'));

$instances = [];
$eni2ips = [];
$eni2instance = [];
$ip2cluster = [];

foreach (array_keys($logStreams) as $eni) {
    $ips = [];
    $instanceId = false;

    // describe interface
    try {
        $res = $ec2client->describeNetworkInterfaces([
            'NetworkInterfaceIds' => [substr($eni, 0, 12)]
            ]);
    } catch (Ec2Exception $e) {
        // FIXME: Interface might be destroyed

        continue;
    }

    // require networkinterfaces
    if ($res->hasKey('NetworkInterfaces')) {
        foreach ($res->get('NetworkInterfaces') as $iface) {
            foreach ($iface['PrivateIpAddresses'] as $prvip) {
                if ($prvip['PrivateIpAddress']) {
                    $ips[] = $prvip['PrivateIpAddress'];
                }

                if (isset($prvip['Association']) && isset($prvip['Association']['PublicIp'])) {
                    $ips[] = $prvip['Association']['PublicIp'];
                }
            }

            if (isset($iface['Attachment']) && isset($iface['Attachment']['InstanceId'])) {
                $instanceId = $iface['Attachment']['InstanceId'];

                break;
            }
        }
    }

    // have instanceId?
    if (!$instanceId) continue;

    // store..
    $eni2ips[$eni] = $ips;
    $eni2instance[$eni] = $instanceId;

    // have instance or fetch?
    if (!isset($instances[$instanceId])) {
        try {
            $res = $ec2client->describeInstances([
                'InstanceIds' => array($instanceId)
                ]);
        } catch (Ec2Exception $e) {
            // FIXME: Instace might be destroyed

            continue;
        }

        // get interesting tags
        $tags = [];

        // xx
        if ($res->hasKey('Reservations')) {
            $reservations = $res->get('Reservations');

            foreach ($reservations as $reservation) {
                foreach ($reservation['Instances'] as $instance) {
                    if (isset($instance['Tags'])) {
                        foreach ($instance['Tags'] as $tag) {
                            if ($tag['Key'] == 'Name') {
                                $tags['name'] = $tag['Value'];
                            } elseif ($tag['Key'] == 'Cluster') {
                                $tags['cluster'] = $tag['Value'];
                            }
                        }
                    }
                }
            }
        }

        $instances[$instanceId] = [
            'tags' => $tags
            ];

        $cluster = (isset($tags['cluster']) ? $tags['cluster'] : 'unknown');
    } else {
        $cluster = (isset($instances[$instanceId]['tags']['cluster']) ? $instances[$instanceId]['tags']['cluster'] : 'unknown');
    }

    // fill ip2cluster
    foreach ($ips as $ip) {
        $ip2cluster[$ip] = $cluster;
    }
}

/*
$data = array($instances, $eni2ips, $eni2instance, $ip2cluster);

file_put_contents(
    'x.dat',
    serialize($data)
    );
*/

foreach (array_keys($logStreams) as $eni) {
    _log('analyzing ' . $eni);

    if (!isset($eni2ips[$eni])) continue;

    $ips = $eni2ips[$eni];

    // get events
    $fp = fopen(
        PROJECT_ROOT . '/data/' . $eni . '.log',
        'r'
        );

    $stats = [
        'in' => [
            'sum' => 0,
            'acc' => 0,
            'rej' => 0,
            'cluster' => [],
            'ip' => [],
            ],
        'out' => [
            'sum' => 0,
            'acc' => 0,
            'rej' => 0,
            'cluster' => [],
            'ip' => [],
            ],
        'total' => [
            'sum' => 0,
            'acc' => 0,
            'rej' => 0,
            'cluster' => [],
            'ip' => [],
            ],
        ];

    while (!feof($fp)) {
        $buffer = fgets($fp);

        if (!$buffer) break;

        $buffer = trim($buffer);

        if (!strlen($buffer)) break;

        $x = explode(' ', $buffer);

        if ($x[0] != 2) continue; // support flow log version 2 only

        list($version, $accountid, $interfaceid, $srcaddr, $dstaddr, $srcport, $dstport, $protocol, $packets, $bytes, $start, $end, $action, $logstatus) = $x;

        $a = false; $ip = false; $port = false;

        if (in_array($srcaddr, $ips)) {
            $a = 'out';
            $ip = $dstaddr;
            $port = $dstport;
        } else {
            $a = 'in';
            $ip = $srcaddr;
            $port = $srcport;
        }

        $cluster = 'unknown';

        if (isset($ip2cluster[$ip])) $cluster = $ip2cluster[$ip];

        $b = false;

        if ($action == 'ACCEPT') $b = 'acc';
        else $b = 'rej';

        // in || out
        $stats[$a]['sum'] += $bytes;
        $stats[$a][$b] += $bytes;

        if (!isset($stats[$a]['cluster'][$cluster])) $stats[$a]['cluster'][$cluster] = 0;
        $stats[$a]['cluster'][$cluster] += $bytes;

        if (!isset($stats[$a]['ip'][$ip])) $stats[$a]['ip'][$ip] = 0;
        $stats[$a]['ip'][$ip] += $bytes;

        // total
        $stats['total']['sum'] += $bytes;
        $stats['total'][$b] += $bytes;

        if (!isset($stats['total']['cluster'][$cluster])) $stats['total']['cluster'][$cluster] = 0;
        $stats['total']['cluster'][$cluster] += $bytes;

        if (!isset($stats['total']['ip'][$ip])) $stats['total']['ip'][$ip] = 0;
        $stats['total']['ip'][$ip] += $bytes;
    }

    file_put_contents(
        PROJECT_ROOT . '/data/' . $eni . '.stats.json',
        json_encode([
            'instanceId' => $eni2instance[$eni],
            'tags' => $instances[$eni2instance[$eni]]['tags'],
            'stats' => $stats
            ])
        );

    unset($stats);
}

// _log
function _log($msg)
{
    echo '[?] ' . $msg . "\n";
}

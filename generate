#!/usr/bin/env php
<?php
/**
 * Copyright (C) 2015 Marko Kercmar
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// PROJECT_ROOT
define('PROJECT_ROOT', realpath(__DIR__));

// composer
require PROJECT_ROOT . '/vendor/autoload.php';

// config
require PROJECT_ROOT . '/config.php';

// jpgraph
require PROJECT_ROOT . '/jpgraph/src/jpgraph.php';
require PROJECT_ROOT . '/jpgraph/src/jpgraph_pie.php';

// create target dir
@mkdir(
    PROJECT_ROOT . '/out/' . date('Ymd') . '/',
    0777
    );

// contains all data for generating HTML
$instances = [];
$clusters = [];
$azs = [];
$overall = [];

// iterate over logStreams
$logStreams = json_decode(
    file_get_contents(PROJECT_ROOT . '/data/logStreams.json'),
    true
    );

// merge eni stats to instance
foreach (array_keys($logStreams) as $eni) {
    if (!file_exists(PROJECT_ROOT . '/data/' . $eni . '.stats.json')) continue;

    $x = json_decode(file_get_contents(PROJECT_ROOT . '/data/' . $eni . '.stats.json'), true);

    // some stuff
    $instanceId = $x['instanceId'];
    $name = (isset($x['tags']['name']) ? $x['tags']['name'] : $instanceId);
    $cluster = (isset($x['tags']['cluster']) ? $x['tags']['cluster'] : 'unknown');
    $az = $x['az'];

    // store..
    if (!isset($instances[$instanceId])) {
        $instances[$instanceId] = [
            'instanceId' => $instanceId,
            'name' => $name,
            'cluster' => $cluster,
            'stats' => $x['stats']
            ];
    } else {
        $instances[$instanceId]['stats'] = _array_merge_sum(
            $instances[$instanceId]['stats'],
            $x['stats']
            );
    }

    if (!isset($clusters[$cluster])) {
        $clusters[$cluster] = [
            'cluster' => $cluster,
            'stats' => $x['stats'],
            ];
    } else {
        $clusters[$cluster]['stats'] = _array_merge_sum(
            $clusters[$cluster]['stats'],
            $x['stats']
            );
    }

    if (!isset($azs[$az])) {
        $azs[$az] = [
            'az' => $az,
            'stats' => $x['stats'],
            ];
    } else {
        $azs[$az]['stats'] = _array_merge_sum(
            $azs[$az]['stats'],
            $x['stats']
            );
    }

    if (!isset($overall['stats'])) {
        $overall['stats'] = $x['stats'];
    } else {
        $overall['stats'] = _array_merge_sum(
            $overall['stats'],
            $x['stats']
            );
    }
}

// helper
$n = "\n"; $t = '  '; $tt = $t . $t; $ttt = $tt . $t; $tttt = $tt . $tt;

###################### HEADER
$header  = '';
$header .= '<!DOCTYPE html>' . $n;
$header .= '<html lang="en">' . $n;
$header .= '<head>' . $n;
$header .= $t . '<title>flowlog</title>' . $n;
$header .= $t . '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">' . $n;
$header .= $t . '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">' . $n;
$header .= $t . '<style>' . $n;

$header .= $t . '</style>' . $n;
$header .= '</head>' . $n;
$header .= '<body>' . $n;

$header .= '<nav class="navbar navbar-default">' . $n;
$header .= '<div class="container-fluid">' . $n;

$header .= '<div class="navbar-header">' . $n;
$header .= '<a class="navbar-brand" href="#">flowlog</a>' . $n;
$header .= '</div>' . $n;

$header .= '<div><ul class="nav navbar-nav">' . $n;

$header .= '<li><a href="index.html">Overview</a></li>' . $n;
$header .= '<li><a href="clusters.html">Clusters</a></li>' . $n;
$header .= '<li><a href="instances.html">Instances</a></li>' . $n;

$header .= '</ul></div>' . $n;

$header .= '</nav>' . $n;

###################### FOOTER
$footer  = '';
$footer .= '</body>' . $n;
$footer .= '</html>' . $n;

###################### OVERVIEW

// HTML
$o  = '';
$o .= $header;

$o .= '<div class="container-fluid">' . $n;
$o .= '<div class="row">' . $n;

    // OVERALL
    $o .= '<div class="col-md-6">' . $n;

    $o .= '<div class="panel panel-default">' . $n;

    $o .= '<div class="panel-heading"><h3 class="panel-title">Overall</h3></div>' . $n;

    $o .= '<div class="row">' . $n;
    $o .= '<div class="col-md-6">' . $n;

    # dates
    $o .= _generate_dates($overall);

    $o .= '<br>' . $n;

    # accept/rej
    $o .= _generate_acc_rej($overall);

    $o .= '<br>' . $n;

    # az
    $o .= _generate_az($overall);

    $o .= '<br>' . $n;

    # cluster
    $o .= _generate_cluster($overall);

    $o .= '</div>' . $n;
    $o .= '<div class="col-md-6">' . $n;

    $o .= _pie_in_out($overall);

    $o .= _pie_cluster($overall);

    $o .= '</div>' . $n;

    $o .= '</div>' . $n;
    $o .= '</div>' . $n;

$o .= '</div>' . $n;
$o .= '</div>' . $n;

$o .= $footer;

file_put_contents(
    PROJECT_ROOT . '/out/' . date('Ymd') . '/index.html',
    $o
    );

_log('OVERVIEW HTML written');

###################### CLUSTERS

// sort via cluster
uasort(
    $clusters,
    function ($a, $b) {
        return strcmp($a['cluster'], $b['cluster']);
    });

// HTML
$o  = '';
$o .= $header;

$o .= '<div class="container-fluid">' . $n;
$o .= '<div class="row">' . $n;

$i = 0;

foreach ($clusters as $cluster => $data) {
    if ($i == 4) {
        $o .= '</div>' . $n;
        $o .= '<div class="row">' . $n;

        $i = 0;
    }

    $i++;

    $o .= '<div class="col-md-3">' . $n;
    $o .= '<div class="panel panel-default">' . $n;

    # title
    $o .= '<div class="panel-heading"><h3 class="panel-title">' . $cluster . '</h3></div>' . $n;

    # dates
    $o .= _generate_dates($data);

    $o .= '<br>' . $n;

    # accept/rej
    $o .= _generate_acc_rej($data);

    $o .= '<br>' . $n;

    # az
    $o .= _generate_az($data);

    $o .= '<br>' . $n;

    # cluster
    $o .= _generate_cluster($data);

    $o .= '</div>' . $n;
    $o .= '</div>' . $n;
}

$o .= '</div>' . $n;
$o .= '</div>' . $n;

$o .= $footer;

file_put_contents(
    PROJECT_ROOT . '/out/' . date('Ymd') . '/clusters.html',
    $o
    );

_log('CLUSTERS HTML written');

###################### INSTANCES

// sort via name
uasort(
    $instances,
    function ($a, $b) {
        return strcmp($a['name'], $b['name']);
    });

// HTML
$o  = '';
$o .= $header;

$o .= '<div class="container-fluid">' . $n;
$o .= '<div class="row">' . $n;

$i = 0;

foreach ($instances as $instanceId => $data) {
    if ($i == 4) {
        $o .= '</div>' . $n;
        $o .= '<div class="row">' . $n;

        $i = 0;
    }

    $i++;

    $o .= '<div class="col-md-3">' . $n;

    $o .= '<div class="panel panel-default">' . $n;

    $o .= '<div class="panel-heading"><h3 class="panel-title">' . $data['cluster'] . ' :: ' . $data['name'] . '</h3></div>' . $n;

    # dates
    $o .= _generate_dates($data);

    $o .= '<br>' . $n;

    # accept/rej
    $o .= _generate_acc_rej($data);

    $o .= '<br>' . $n;

    # az
    $o .= _generate_az($data);

    $o .= '<br>' . $n;

    # cluster
    $o .= _generate_cluster($data);

    $o .= '</div>' . $n;
    $o .= '</div>' . $n;
}

$o .= '</div>' . $n;
$o .= '</div>' . $n;

$o .= $footer;

file_put_contents(
    PROJECT_ROOT . '/out/' . date('Ymd') . '/instances.html',
    $o
    );

_log('INSTANCES HTML written');

// _format_bytes($bytes, $precision);
function _format_bytes($size, $precision = 2)
{
    if ($size == 0) return 0;

    $base = log($size, 1024);
    $suffixes = array('', 'k', 'M', 'G', 'T');

    return round(pow(1024, $base - floor($base)), $precision) . $suffixes[floor($base)];
}

// _array_merge_sum($a, $b);
function _array_merge_sum($a, $b)
{
    foreach ($b as $k => $v) {
        if (isset($a[$k])) {
            if ($k == 'first') {
                $x = $a[$k];

                if ($b[$k] < $x) $x = $b[$k];

                $a[$k] = $x;
            } elseif($k == 'last') {
                $x = $a[$k];

                if ($b[$k] > $x) $x = $b[$k];

                $a[$k] = $x;
            } else {
                if (is_array($v)) {
                    $a[$k] = _array_merge_sum($a[$k], $v);
                } else {
                    $a[$k] += $v;
                }
            }
        } else {
            $a[$k] = $v;
        }
    }

    return $a;
}

// _generate_dates($data);
function _generate_dates($data)
{
    global $n, $t, $tt;

    $o = '';

    $o .= '<table class="table">' . $n;

    # first
    $o .= '<tr>' . $n;
    $o .= '<th class="col-md-4">First event</th>' . $n;
    $o .= '<td>' . date('Y-m-d H:i:s', $data['stats']['first']) . '</td>' . $n;
    $o .= '</tr>' . $n;

    # last
    $o .= '<tr>' . $n;
    $o .= '<th class="col-md-4">Last event</th>' . $n;
    $o .= '<td>' . date('Y-m-d H:i:s', $data['stats']['last']) . '</td>' . $n;
    $o .= '</tr>' . $n;

    $o .= '</table>' . $n;

    return $o;
}

// _generate_acc_rej($data);
function _generate_acc_rej($data)
{
    global $n, $t, $tt;

    $o = '';

    # totals
    $o .= '<table class="table">' . $n;

    # head
    $o .= '<thead>' . $n;
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th class="col-md-3"></th>' . $n;
    $o .= $tt . '<th class="col-md-3">IN</th>' . $n;
    $o .= $tt . '<th class="col-md-3">OUT</th>' . $n;
    $o .= $tt . '<th class="col-md-3">SUM</th>' . $n;
    $o .= $t . '</tr>' . $n;
    $o .= '</thead>' . $n;

    # body
    $o .= '<tbody>' . $n;

    # accept
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th>ACCEPT</th>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['in']['acc']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['out']['acc']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['total']['acc']) . '</td>' . $n;
    $o .= $t . '</tr>' . $n;

    # reject
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th>REJECT</th>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['in']['rej']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['out']['rej']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['total']['rej']) . '</td>' . $n;
    $o .= $t . '</tr>' . $n;

    # total
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th>TOTAL</th>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['in']['sum']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['out']['sum']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($data['stats']['total']['sum']) . '</td>' . $n;
    $o .= $t . '</tr>' . $n;

    # foot
    $o .= '</tbody>' . $n;
    $o .= '</table>' . $n;

    return $o;
}

// _generate_cluster($data);
function _generate_cluster($data)
{
    global $n, $t, $tt;

    $o  = '';

    $o .= '<div style="height: 350px; overflow: auto;">' . $n;

    $o .= '<table class="table header-fixed">' . $n;

    # head
    $o .= '<thead>' . $n;
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th class="col-md-3"></th>' . $n;
    $o .= $tt . '<th class="col-md-3">IN</th>' . $n;
    $o .= $tt . '<th class="col-md-3">OUT</th>' . $n;
    $o .= $tt . '<th class="col-md-3">SUM</th>' . $n;
    $o .= $t . '</tr>' . $n;
    $o .= '</thead>' . $n;

    # clusters
    $x_clusters = array_keys($data['stats']['total']['cluster']);

    sort($x_clusters);

    # body
    $o .= '<tbody>' . $n;

    # iterate..
    foreach ($x_clusters as $x_cluster) {
        $o .= $t . '<tr>' . $n;

        $o .= $tt . '<th>' . $x_cluster . '</th>' . $n;

        $in = 0;
        if (isset($data['stats']['in']['cluster'][$x_cluster])) $in += $data['stats']['in']['cluster'][$x_cluster];

        $o .= $tt . '<td>' . _format_bytes($in) . '</td>' . $n;

        $out = 0;
        if (isset($data['stats']['out']['cluster'][$x_cluster])) $out += $data['stats']['out']['cluster'][$x_cluster];

        $o .= $tt . '<td>' . _format_bytes($out) . '</td>' . $n;

        $o .= $tt . '<td>' . _format_bytes($in + $out) . '</td>' . $n;

        $o .= $t . '</tr>' . $n;
    }

    # foot
    $o .= '</tbody>' . $n;
    $o .= '</table>' . $n;

    $o .= '</div>' . $n;

    return $o;
}

// _generate_az($data);
function _generate_az($data)
{
    global $n, $t, $tt;

    $o  = '';

    $o .= '<div style="height: 185px;">' . $n;

    $o .= '<table class="table header-fixed">' . $n;

    # head
    $o .= '<thead>' . $n;
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th class="col-md-3"></th>' . $n;
    $o .= $tt . '<th class="col-md-3">IN</th>' . $n;
    $o .= $tt . '<th class="col-md-3">OUT</th>' . $n;
    $o .= $tt . '<th class="col-md-3">SUM</th>' . $n;
    $o .= $t . '</tr>' . $n;
    $o .= '</thead>' . $n;

    # azs
    $x_azs = array_keys($data['stats']['total']['az']);

    sort($x_azs);

    # body
    $o .= '<tbody>' . $n;

    # iterate..
    foreach ($x_azs as $x_az) {
        $o .= $t . '<tr>' . $n;

        $o .= $tt . '<th>' . $x_az . '</th>' . $n;

        $in = 0;
        if (isset($data['stats']['in']['az'][$x_az])) $in += $data['stats']['in']['az'][$x_az];

        $o .= $tt . '<td>' . _format_bytes($in) . '</td>' . $n;

        $out = 0;
        if (isset($data['stats']['out']['az'][$x_az])) $out += $data['stats']['out']['az'][$x_az];

        $o .= $tt . '<td>' . _format_bytes($out) . '</td>' . $n;

        $o .= $tt . '<td>' . _format_bytes($in + $out) . '</td>' . $n;

        $o .= $t . '</tr>' . $n;
    }

    # foot
    $o .= '</tbody>' . $n;
    $o .= '</table>' . $n;

    $o .= '</div>' . $n;

    return $o;
}

// _pie_in_out($data);
function _pie_in_out($data)
{
    $legend = ['in', 'out'];
    $values = [$data['stats']['in']['sum'], $data['stats']['out']['sum']];

    $graph = new PieGraph(400, 350);
    $graph->title->Set('IN/OUT');
    $graph->setBox(true);

    $plot = new PiePlot($values);
    $plot->SetLegends($legend);

    $graph->Add($plot);

    ob_start();
    $graph->Stroke();

    $raw = ob_get_contents();
    ob_end_clean();

    return '<img src="data:image/jpeg;base64,' . base64_encode($raw) . '" />';
}

// _pie_cluster($data);
function _pie_cluster($data)
{
    $legend = [];
    $values = [];

    foreach ($data['stats']['total']['cluster'] as $k => $v) {
        $legend[] = $k;
        $values[] = $v;
    }

    $graph = new PieGraph(400, 350);
    $graph->title->Set('CLUSTER');
    $graph->setBox(true);

    $plot = new PiePlot($values);
    $plot->SetLegends($legend);

    $graph->Add($plot);

    ob_start();
    $graph->Stroke();

    $raw = ob_get_contents();
    ob_end_clean();

    return '<img src="data:image/jpeg;base64,' . base64_encode($raw) . '" />';
}

// _log
function _log($msg)
{
    echo '[?] ' . $msg . "\n";
}

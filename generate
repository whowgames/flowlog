#!/usr/bin/env php
<?php
// PROJECT_ROOT
define('PROJECT_ROOT', realpath(__DIR__));

// composer
require PROJECT_ROOT . '/vendor/autoload.php';

// config
require PROJECT_ROOT . '/config.php';

// contains all data for generating HTML
$data = [];

// iterate over logStreams
$logStreams = json_decode(
    file_get_contents(PROJECT_ROOT . '/data/logStreams.json'),
    true
    );

// merge eni stats to instance
foreach (array_keys($logStreams) as $eni) {
    if (!file_exists(PROJECT_ROOT . '/data/' . $eni . '.stats.json')) continue;

    $x = json_decode(file_get_contents(PROJECT_ROOT . '/data/' . $eni . '.stats.json'), true);

    // store..
    if (!isset($data[$x['instanceId']])) {
        $data[$x['instanceId']] = $x;
    } else {
        // TODO: merge into existing entry, we currently only have one interface per instance, so not needed for us
    }
}

//file_put_contents('x.json', json_encode($data));

// sort via cluser & name
uasort(
    $data,
    function ($a, $b) {
        $s1 = (isset($a['tags']['cluster']) ? $a['tags']['cluster'] : 'z') . ' :: ';
        $s1 .= (isset($a['tags']['name']) ? $a['tags']['name'] : $a['instanceId']);

        $s2 = (isset($b['tags']['cluster']) ? $b['tags']['cluster'] : 'z') . ' :: ';
        $s2 .= (isset($b['tags']['name']) ? $b['tags']['name'] : $b['instanceId']);

        return strcmp($s1, $s2);
    });

$n = "\n"; $t = '  '; $tt = $t . $t; $ttt = $tt . $t; $tttt = $tt . $tt;

$o  = '';
$o .= '<!doctype html>' . $n;
$o .= '<html>' . $n;
$o .= '<head>' . $n;
$o .= $t . '<title>flowlog</title>' . $n;
$o .= '</head>' . $n;
$o .= '<body>' . $n;

foreach ($data as $instance) {
    $title  = (isset($instance['tags']['cluster']) ? $instance['tags']['cluster'] : 'unknown') . ' :: ';
    $title .= (isset($instance['tags']['name']) ? $instance['tags']['name'] : $instance['instanceId']);

    $o .= '<h1>' . $title . '</h1>' . $n;

    // totals
    $o .= '<table border="1">' . $n;

    // head
    $o .= '<thead>' . $n;
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th></th>' . $n;
    $o .= $tt . '<th>IN</th>' . $n;
    $o .= $tt . '<th>OUT</th>' . $n;
    $o .= $tt . '<th>SUM</th>' . $n;
    $o .= $t . '</tr>' . $n;
    $o .= '</thead>' . $n;

    // body
    $o .= '<tbody>' . $n;

    // accept
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th>ACCEPT</th>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['in']['acc']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['out']['acc']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['total']['acc']) . '</td>' . $n;
    $o .= $t . '</tr>' . $n;

    // reject
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th>REJECT</th>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['in']['rej']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['out']['rej']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['total']['rej']) . '</td>' . $n;
    $o .= $t . '</tr>' . $n;

    // total
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th>TOTAL</th>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['in']['sum']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['out']['sum']) . '</td>' . $n;
    $o .= $tt . '<td>' . _format_bytes($instance['stats']['total']['sum']) . '</td>' . $n;
    $o .= $t . '</tr>' . $n;

    $o .= '</tbody>' . $n;

    $o .= '</table>' . $n;

    $o .= '<br>' . $n;

    // cluster
    $o .= '<table border="1">' . $n;

    // head
    $o .= '<thead>' . $n;
    $o .= $t . '<tr>' . $n;
    $o .= $tt . '<th></th>' . $n;
    $o .= $tt . '<th>IN</th>' . $n;
    $o .= $tt . '<th>OUT</th>' . $n;
    $o .= $tt . '<th>SUM</th>' . $n;
    $o .= $t . '</tr>' . $n;
    $o .= '</thead>' . $n;

    // clusters
    $clusters = array_keys($instance['stats']['total']['cluster']);

    // body
    $o .= '<tbody>' . $n;

    // iterate..
    foreach ($clusters as $cluster) {
        $o .= $t . '<tr>' . $n;

        $o .= $tt . '<th>' . $cluster . '</th>' . $n;

        $in = 0;
        if (isset($instance['stats']['in']['cluster'][$cluster])) $in += $instance['stats']['in']['cluster'][$cluster];

        $o .= $tt . '<td>' . _format_bytes($in) . '</td>' . $n;

        $out = 0;
        if (isset($instance['stats']['out']['cluster'][$cluster])) $out += $instance['stats']['out']['cluster'][$cluster];

        $o .= $tt . '<td>' . _format_bytes($out) . '</td>' . $n;

        $o .= $tt . '<td>' . _format_bytes($in + $out) . '</td>' . $n;

        $o .= $t . '</tr>' . $n;
    }

    // foot
    $o .= '</tbody>' . $n;

    $o .= '</table>' . $n;
}

$o .= '</body>' . $n;
$o .= '</html>' . $n;

file_put_contents(
    PROJECT_ROOT . '/out/index.html',
    $o
    );

// _format_bytes($bytes, $precision);
function _format_bytes($size, $precision = 2)
{
    if ($size == 0) return 0;

    $base = log($size, 1024);
    $suffixes = array('', 'k', 'M', 'G', 'T');

    return round(pow(1024, $base - floor($base)), $precision) . $suffixes[floor($base)];
}

#!/usr/bin/env php
<?php
// PROJECT_ROOT
define('PROJECT_ROOT', realpath(__DIR__));

// composer
require PROJECT_ROOT . '/vendor/autoload.php';

// config
require PROJECT_ROOT . '/config.php';

// uses
use Aws\CloudWatch\CloudWatchClient;
use Aws\CloudWatchLogs\CloudWatchLogsClient;

// init cloudwatch client
$cwlclient = new CloudWatchLogsClient([
    'region' => $config['Region'],
    'version' => 'latest',
    'debug' => false
    ]);

// describe log streams
$logStreams = [];

_log('fetching logstreams');

_recursiveDescribeLogStreams($cwlclient, $config['LogGroupName'], $logStreams);

_debug(count($logStreams) . ' logstreams');

// write..
file_put_contents(PROJECT_ROOT . '/data/logStreams.json', json_encode($logStreams));

// fetch events..
foreach ($logStreams as $logStream) {
    _log('fetching ' . $logStream['logStreamName'] . ' events');

    $fp = fopen(
        PROJECT_ROOT . '/data/' . $logStream['logStreamName'] . '.log',
        'w'
        );

    $events = _recursiveGetLogEvents($cwlclient, $config['LogGroupName'], $logStream['logStreamName'], $config['StartTime'], $config['EndTime'], $fp);

    fclose($fp);

    _debug($events . ' events');
}

// _log
function _log($msg)
{
    echo '[?] ' . $msg . "\n";
}

// _debug
function _debug($msg)
{
    echo '[#] ' . $msg . "\n";
}

// _recursiveDescribeLogStreams($client, $logGroupName, &$return, $nextToken);
function _recursiveDescribeLogStreams($client, $logGroupName, &$return, $nextToken = false)
{
    $req = ['logGroupName' => $logGroupName];

    if ($nextToken) {
        $req['nextToken'] = $nextToken;
    }

    $res = $client->describeLogStreams($req);

    if ($res->hasKey('logStreams')) {
        foreach ($res->get('logStreams') as $entry) {
            if (!preg_match('/^eni-[a-z0-9]{8}-all$/', $entry['logStreamName'])) continue;

            $return[$entry['logStreamName']] = $entry;
        }
    }

    if ($res->hasKey('nextToken')) {
        _recursiveDescribeLogStreams($client, $logGroupName, $return, $res->get('nextToken'));
    }
}

// _recursiveGetLogEvents($client, $logGroupName, $logStreamName, &$return, $nextToken);
function _recursiveGetLogEvents($client, $logGroupName, $logStreamName, $startTime, $endTime, &$fp, $nextToken = false)
{
    $events = 0;

    usleep(250000); // GetLogEvents is throttled to 5 request per second

    $req = [
        'logGroupName' => $logGroupName,
        'logStreamName' => $logStreamName,
        'startFromHead' => true,
        'startTime' => $startTime,
        'endTime' => $endTime,
        ];

    if ($nextToken) {
        $req['nextToken'] = $nextToken;
    }

    $res = $client->getLogEvents($req);

    $count = false;

    if ($res->hasKey('events')) {
        $count = count($res->get('events'));

        foreach ($res->get('events') as $event) {
            fwrite($fp, trim($event['message']) . "\n");
            $events++;
        }
    }

    if ($res->hasKey('nextForwardToken') && ($count || !$nextToken)) {
        $events += _recursiveGetLogEvents($client, $logGroupName, $logStreamName, $startTime, $endTime, $fp, $res->get('nextForwardToken'));
    }

    unset($req);
    unset($res);
    unset($count);

    return $events;
}
